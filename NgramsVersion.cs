using System;
using System;
using System.Collections.Generic;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace n_grams_version
{
    class Program
    {
        static HashSet<string> patterns = new HashSet<string>();

        static void Main(string[] args)
        {
            for (int i = 1; i < 21; i++)
            {
                int k = 0;
                HashSet<string> firstTwo = new HashSet<string>();
                string[] malware1FilePaths = Directory.GetFiles(@$"G:\University\Algorithms\project\texts\Released\Train\Malware Sample\{i}");
                firstTwo.UnionWith((FindCommonPatterns(Encoding.UTF8.GetString(File.ReadAllBytes(malware1FilePaths[0])), (Encoding.UTF8.GetString(File.ReadAllBytes(malware1FilePaths[1]))), 25)));
                for (int q = 2; q< 5; q+=2)
                {
                     firstTwo.Intersect(GetNgrams(Encoding.UTF8.GetString(File.ReadAllBytes(malware1FilePaths[q*4])),25));
                }
                patterns.UnionWith(firstTwo);
            }
            foreach(string pattern in patterns)
            {
                if (pattern.Contains('0') | pattern.Contains("\0"))
                    patterns.Remove(pattern);
            }
            string inputAddress = Console.ReadLine();
            string[] inputFiles = Directory.GetFiles(inputAddress);
            List<int> malwares = new List<int>();
            int j = 0;
            for (int i = 0; i < inputFiles.Length; i++)
            {
                HashSet<string> text = GetNgrams(Encoding.UTF8.GetString(File.ReadAllBytes(inputFiles[i])), 25);
                if (patterns.Any(s => text.Contains(s)))
                {
                    Console.Clear();
                    Console.WriteLine($"Total files : {inputFiles.Length}");
                    Console.WriteLine($"Total analyzed : {i}");
                    Console.WriteLine($"Total Malwares found : {j}");
                    malwares.Add(i);
                    j++;
                }
            }
            Console.Clear();
            Console.WriteLine($"Total files : {inputFiles.Length}");
            Console.WriteLine($"Total analyzed : {inputFiles.Length}");
            Console.WriteLine($"Total Malwares found : {j}");
        }

        static HashSet<string> FindCommonPatterns(string text1, string text2, int n)
        {
            var patterns1 = GetNgrams(text1.Substring(0, text1.Length/10), n);
            var patterns2 = GetNgrams(text2.Substring(0, text2.Length/10), n);

            patterns1.IntersectWith(patterns2);

            return patterns1;
        }

        static HashSet<string> GetNgrams(string text, int n)
        {
            var ngrams = new HashSet<string>();

            for (int i = 0; i < text.Length/2; i++)
            {
                string ngram = text.Substring(i, n);
                ngrams.Add(ngram);
            }

            return ngrams;
        }

        static string HexToString(string hexString)
        {
            hexString = hexString.Replace(" ", ""); // Remove any spaces from the input string

            byte[] byteData = new byte[hexString.Length / 2];
            for (int i = 0; i < byteData.Length; i++)
            {
                byteData[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16); // Convert each pair of hex characters to a byte
            }

            string normalString = System.Text.Encoding.UTF8.GetString(byteData); // Decode the byte data to a string using UTF-8 encoding

            return normalString;
        }
    }
}
