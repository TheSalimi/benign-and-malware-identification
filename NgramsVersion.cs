using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace n_grams_version
{
    class Program
    {
        static HashSet<string> patterns = new HashSet<string>();
        const int n = 35;
        static void Main(string[] args)
        {
            for (int i = 1; i < 21; i++)
            {
                HashSet<string> firstTwo = new HashSet<string>();
                string[] malware1FilePaths = Directory.GetFiles(@$"G:\University\Algorithms\project\texts\Released\Train\Malware Sample\{i}");
                firstTwo.UnionWith((FindCommonPatterns(Encoding.UTF8.GetString(File.ReadAllBytes(malware1FilePaths[0])), (Encoding.UTF8.GetString(File.ReadAllBytes(malware1FilePaths[1]))), n)));
                patterns.UnionWith(firstTwo);
            }

            foreach (string pattern in patterns)
            {
                if (pattern.Contains('0') | pattern.Contains("\0"))
                    patterns.Remove(pattern);
            }

            //before :for folder six and eight : 2 + 2  true malware detection
            //aft er : for folder six and eight : 295 + 299  true malware detection and 1 false detection for benign
            patterns.Add("ExitProcess\0KERNEL32.dll\0"); 
         
            string inputAddress = Console.ReadLine();
            string[] inputFiles = Directory.GetFiles(inputAddress);

            int j = 0;
            for (int i = 0; i < inputFiles.Length; i++)
            {
                HashSet<string> text = GetNgrams(Encoding.UTF8.GetString(File.ReadAllBytes(inputFiles[i])), n);
                HashSet<string> text68 = GetNgrams(Encoding.UTF8.GetString(File.ReadAllBytes(inputFiles[i])), 25);
                if (patterns.Any(s => text.Contains(s)) || patterns.Any(s => text68.Contains(s)))
                {
                    Console.Clear();
                    Console.WriteLine($"Total files : {inputFiles.Length}");
                    Console.WriteLine($"Total analyzed : {i}");
                    Console.WriteLine($"Total Malwares found : {j}");
                    FileMover.MoveFileToFolder(inputFiles[i]);

                    j++;
                }
            }
            Console.Clear();
            Console.WriteLine($"Total files : {inputFiles.Length}");
            Console.WriteLine($"Total analyzed : {inputFiles.Length}");
            Console.WriteLine($"Total Malwares found : {j}");
        }

        static HashSet<string> FindCommonPatterns(string text1, string text2, int n)
        {
            var patterns1 = GetNgrams(text1.Substring(0, text1.Length / 10), n);
            var patterns2 = GetNgrams(text2.Substring(0, text2.Length / 10), n);
            patterns1.IntersectWith(patterns2);
            return patterns1;
        }

        static HashSet<string> GetNgrams(string text, int n)
        {
            var ngrams = new HashSet<string>();

            for (int i = 0; i < text.Length / 2; i++)
            {
                string ngram = text.Substring(i, n);
                ngrams.Add(ngram);
            }

            return ngrams;
        }
    }
    abstract public class FileMover
    {
        public static void MoveFileToFolder(string filePath)
        {
            // Extract the directory path and file name
            string directoryPath = Path.GetDirectoryName(filePath);
            string fileName = Path.GetFileName(filePath);

            // Construct the destination folder path
            string destinationFolderPath = Path.Combine(directoryPath, "Malawares");

            // Check if the destination folder exists
            if (!Directory.Exists(destinationFolderPath))
            {
                // Create a new folder if it doesn't exist
                Directory.CreateDirectory(destinationFolderPath);
            }

            // Construct the new file path in the destination folder
            string newFilePath = Path.Combine(destinationFolderPath, fileName);

            // Move the file to the destination folder
            File.Move(filePath, newFilePath);

            Console.WriteLine($"File moved to: {newFilePath}");
        }
    }
}