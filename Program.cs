using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace Benign_Malware_identification
{
    class Program
    {
        static List<string> malwarePages = new List<string>();
        static List<string> inputPages = new List<string>();
        static List<string> malwarePatterns = new List<string>();
        static void Main()
        {
            //find malware pages and add their hex values to the page list           
            FindPages(@"G:\University\Algorithms\project\Released\Train\Malware Sample");
            FindPages(@"G:\University\Algorithms\project\Released\Train\Malware Sample2");

            for (int i = 0; i < malwarePages.Count-2; i+=2)
            {
                string first1500Characters1 = malwarePages[i].Substring(0, Math.Min(malwarePages[i].Length, 1000));
                string first1500Characters2= malwarePages[i].Substring(0, Math.Min(malwarePages[i+1].Length, 1000));

                malwarePatterns.Add(LongestCommonSubstring(first1500Characters1, first1500Characters2));
            }
            //removeing string of 200 zeros from malware patterns list
            malwarePatterns.RemoveAll(s => s.Length == 200 && s.Trim('0').Length == 0);

            string inputAddress = Console.ReadLine();
            string[] inputFiles = Directory.GetFiles(inputAddress);

            for (int i = 0; i < inputFiles.Length; i++)
            {
                byte[] Bytes = File.ReadAllBytes(inputFiles[i]);
                inputPages.Add(ConvertByteToHex(Bytes));
            }

            int numberOfMalwares = 0;
            for (int i = 0; i < inputPages.Count; i++)
            {
                for (int j = 0; j < malwarePatterns.Count; j++)
                {
                    bool detected = false;
                    if (inputPages[i].IndexOf(malwarePatterns[j]) != -1)
                    {
                        numberOfMalwares++;
                        detected = true;
                        break;
                    }
                    if (detected) break;
                }
            }

            Console.WriteLine($"Detected as malware : {numberOfMalwares}\n" +
                $"Benign : {inputPages.Count - numberOfMalwares}");
        }

        public static string LongestCommonSubstring(string str1, string str2)
        {
            int m = str1.Length;
            int n = str2.Length;

            // Create a matrix to store the lengths of longest common suffixes
            // of substrings. Initialize all values to 0.
            int[,] dp = new int[m + 1, n + 1];

            // Variables to store the length of the longest common substring
            // and its ending position in the strings.
            int maxLength = 0;
            int endPos = 0;

            // Iterate over the strings to fill the dp matrix
            for (int i = 1; i <= m; i++)
            {
                for (int j = 1; j <= n; j++)
                {
                    if (str1[i - 1] == str2[j - 1])
                    {
                        dp[i, j] = dp[i - 1, j - 1] + 1;
                        if (dp[i, j] > maxLength)
                        {
                            maxLength = dp[i, j];
                            endPos = i;
                        }
                    }
                }
            }

            // Extract the longest common substring using the end position and length
            string longestSubstring = str1.Substring(endPos - maxLength, 200);

            return longestSubstring;
        }

        public static void FindPages(string baseAddress)
        {
            for (int i = 1; i < 21; i++)
            {
                string folderNumber = @$"\{i}";
                string[] malware1FilePaths = Directory.GetFiles(@$"{baseAddress}\{i}");
                for (int a = 0; a < 2; a++)
                {
                    byte[] Bytes = File.ReadAllBytes(malware1FilePaths[a]);
                    malwarePages.Add(ConvertByteToHex(Bytes));
                }
            }
        }

        public static string ConvertByteToHex(byte[] byteData)
        {
            string hexValues = BitConverter.ToString(byteData).Replace("-", "");
            //string text = Encoding.ASCII.GetString(HexStringToBytes(hexValues));
            return hexValues;
        }

       /* public static byte[] HexStringToBytes(string hexString)
        {
            if (hexString == null)
                throw new ArgumentNullException("hexString");
            if (hexString.Length % 2 != 0)
                throw new ArgumentException("hexString must have an even length", "hexString");
            var bytes = new byte[hexString.Length / 2];
            for (int i = 0; i < bytes.Length; i++)
            {
                string currentHex = hexString.Substring(i * 2, 2);
                bytes[i] = Convert.ToByte(currentHex, 16);
            }
            return bytes;
        } */
    }
}