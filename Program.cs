using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace Benign_Malware_identification
{
    class Program
    {
        static List<string> malwarePages = new List<string>();
        static List<string> inputPages = new List<string>();
        static List<string> malwarePatterns = new List<string>();
        static void Main()
        {
            //find malware pages and add their hex values to the page list           
            for (int i = 1; i < 21; i++)
            {
                string[] malware1FilePaths = Directory.GetFiles(@$"G:\University\Algorithms\project\texts\Released\Train\Malware Sample\{i}");
                for (int a = 0; a < 2; a++)
                {
                    byte[] Bytes = File.ReadAllBytes(malware1FilePaths[a]);
                    malwarePages.Add(ConvertByteToHex(Bytes));
                }
            }

            for (int i = 0; i < malwarePages.Count-1; i+=2)
            {
                int min = -1000;
                int length = 0;
                string substring = "";
                do
                {
                    min += 1000;
                    length += 1000;
                    string PartOfFirstPage = malwarePages[i].Substring(min, Math.Min(malwarePages[i].Length - min, length));
                    string PartOfSecondPage = malwarePages[i].Substring(min, Math.Min(malwarePages[i + 1].Length, length));
                    substring = LongestCommonSubstring(PartOfFirstPage, PartOfSecondPage);
                }
                while (substring.Length == 200 & substring.Trim('0').Length == 0);
                malwarePatterns.Add(substring);
            }

            string inputAddress = Console.ReadLine();
            string[] inputFiles = Directory.GetFiles(inputAddress);

            for (int i = 0; i < inputFiles.Length; i++)
            {
                byte[] Bytes = File.ReadAllBytes(inputFiles[i]);
                inputPages.Add(ConvertByteToHex(Bytes));
            }

            int numberOfMalwares = 0;
            for (int i = 0; i < inputPages.Count; i++)
            {
                for (int j = 0; j < malwarePatterns.Count; j++)
                {
                    int min = 0;
                    int length = 1000;
                    bool detected = false;
                    try
                    {
                        while (!detected)
                        {
                            if (inputPages[i].Substring(min, length).IndexOf(malwarePatterns[j]) != -1)
                            {
                                numberOfMalwares++;
                                detected = true;
                            }
                            else
                            {
                                min += 1000;
                                length += 1000;
                            }
                            if (min == 5000) break;
                        }
                        if (detected) break;
                    }
                    catch(Exception e) { break; }
                }
            }

            Console.WriteLine($"Detected as malware : {numberOfMalwares}\n" +
                $"Detected as benign : {inputPages.Count - numberOfMalwares}");
        }

        public static string LongestCommonSubstring(string str1, string str2)
        {
            int m = str1.Length;
            int n = str2.Length;
            int[,] dp = new int[m + 1, n + 1];
            // Variables to store the length of the longest common substring
            // and its ending position in the strings.
            int maxLength = 0;
            int endPos = 0;
            for (int i = 1; i <= m; i++)
            {
                for (int j = 1; j <= n; j++)
                {
                    if (str1[i - 1] == str2[j - 1])
                    {
                        dp[i, j] = dp[i - 1, j - 1] + 1;
                        if (dp[i, j] > maxLength)
                        {
                            maxLength = dp[i, j];
                            endPos = i;
                        }
                    }
                }
            }
            string longestSubstring = str1.Substring(endPos - maxLength, 200);
            return longestSubstring;
        }
        public static string ConvertByteToHex(byte[] byteData)
        {
            string hexValues = BitConverter.ToString(byteData).Replace("-", "");
            return hexValues;
        }
    }
}